// js/questoes_api.js - Cliente para API Python
class QuestoesAPI {
    constructor() {
        this.apiUrl = 'http://localhost:5000/api';
    }

    async gerarQuestoes(materia, dificuldade, quantidade) {
        try {
            console.log(`üì° Buscando quest√µes da API: ${materia}, ${dificuldade}, ${quantidade}`);
            
            const response = await fetch(
                `${this.apiUrl}/questoes?materia=${materia}&dificuldade=${dificuldade}&quantidade=${quantidade}`
            );
            
            if (!response.ok) {
                throw new Error(`Erro HTTP: ${response.status}`);
            }
            
            const data = await response.json();
            
            if (!data.sucesso) {
                throw new Error(data.erro || 'Erro desconhecido na API');
            }
            
            console.log('‚úÖ Quest√µes recebidas da API Python:', data.questoes);
            
            // Adaptar o formato da API Python para o formato do seu sistema
            const quest√µesAdaptadas = data.questoes.map((questao, index) => ({
                id: questao.id || Date.now() + index,
                enunciado: questao.enunciado,
                alternativas: questao.alternativas || questao.opcoes,
                resposta_correta: 0, // A API Python retorna a resposta correta, vamos encontrar o √≠ndice
                tipo: questao.tipo || materia,
                dificuldade: questao.dificuldade || dificuldade
            }));
            
            return quest√µesAdaptadas;
            
        } catch (error) {
            console.error('‚ùå Erro ao buscar da API Python:', error);
            console.log('üîÑ Usando quest√µes locais (fallback)');
            return this.gerarQuestoesLocais(materia, dificuldade, quantidade);
        }
    }

    gerarQuestoesLocais(materia, dificuldade, quantidade) {
        const quest√µes = [];
        
        for (let i = 0; i < quantidade; i++) {
            const questao = {
                id: Date.now() + i,
                enunciado: `${this.formatarMateria(materia)} - Quest√£o ${i+1} (${this.formatarDificuldade(dificuldade)})`,
                alternativas: [
                    `Alternativa Correta ${i+1}`,
                    `Alternativa Incorreta A ${i+1}`,
                    `Alternativa Incorreta B ${i+1}`,
                    `Alternativa Incorreta C ${i+1}`
                ],
                resposta_correta: 0,
                tipo: materia,
                dificuldade: dificuldade
            };
            quest√µes.push(questao);
        }
        
        return quest√µes;
    }

    formatarMateria(materia) {
        const materias = {
            'matematica': 'Matem√°tica',
            'portugues': 'Portugu√™s',
            'ciencias': 'Ci√™ncias',
            'historia': 'Hist√≥ria', 
            'geografia': 'Geografia',
            'logica': 'L√≥gica'
        };
        return materias[materia] || materia;
    }

    formatarDificuldade(dificuldade) {
        const dificuldades = {
            'facil': 'F√°cil',
            'medio': 'M√©dio',
            'dificil': 'Dif√≠cil'
        };
        return dificuldades[dificuldade] || dificuldade;
    }

    // Verificar se a API est√° online
    async verificarConexao() {
        try {
            const response = await fetch(`${this.apiUrl}/health`);
            const data = await response.json();
            return data.status === 'online';
        } catch (error) {
            return false;
        }
    }
}